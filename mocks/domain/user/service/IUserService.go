// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "faceit/domain/user/dto"

	mock "github.com/stretchr/testify/mock"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user, password
func (_m *IUserService) Create(ctx context.Context, user *dto.User, password string) (*dto.User, error) {
	ret := _m.Called(ctx, user, password)

	var r0 *dto.User
	if rf, ok := ret.Get(0).(func(context.Context, *dto.User, string) *dto.User); ok {
		r0 = rf(ctx, user, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.User, string) error); ok {
		r1 = rf(ctx, user, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, filter, page, pageSize
func (_m *IUserService) Get(ctx context.Context, filter *dto.Filter, page int64, pageSize int64) ([]*dto.User, uint64, error) {
	ret := _m.Called(ctx, filter, page, pageSize)

	var r0 []*dto.User
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Filter, int64, int64) []*dto.User); ok {
		r0 = rf(ctx, filter, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.User)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, *dto.Filter, int64, int64) uint64); ok {
		r1 = rf(ctx, filter, page, pageSize)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *dto.Filter, int64, int64) error); ok {
		r2 = rf(ctx, filter, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Remove provides a mock function with given fields: ctx, id
func (_m *IUserService) Remove(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, user, password
func (_m *IUserService) Update(ctx context.Context, user *dto.User, password string) error {
	ret := _m.Called(ctx, user, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.User, string) error); ok {
		r0 = rf(ctx, user, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserService(t mockConstructorTestingTNewIUserService) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
